ProcessProof URN Format:
urn:{systemNamespace}:{resourceType}::{resourceIdentifier}

resource identifier format:
all IDs are uuids, or semantic indicators like "jobs:read"


Security Notes:
- all security policy will be identity-based, attached to principal
- security policy grants for a resource, will apply to all resource children
  - BFFE caller may override
- security policy grants can be created by anyone who has
	- security:ManagePolicy for a given resource
	- account ownership of a resource, can be found by tracing up the graph to find Account
	- system ownership of a resource, can be found by tracing up the graph to find System
	- System is recursion terminator, in determining the tree of parent resources, for which a user may be granted permission to act upon that resource
  - action is the recursion terminator, in determining the tree of roles assigned, to derive the flatmap of actions that a user may perform
  - build or buy? -- Topaz vs OPA vs OpenFGA


Resource Notes:
- collections are n:n by reference, non-identifying, unless otherwise indicated

ProcessProof Resource Types:
  SystemResourceTypes:
    urn:pp:System
    urn:pp:System.Template.Affidavit

  AccountResourceTypes:
    urn:pp:System.Account
    urn:pp:System.Account.Details
    urn:pp:System.Account.Profile
    urn:pp:System.Account.JobCollection
    urn:pp:System.Account.Job
      urn:pp:System.Account.Job.ServiceAttempt
      urn:pp:System.Account.Job.ServiceAffidavit
      urn:pp:System.Account.Job.JobServiceRequest
      urn:pp:System.Account.Job.JobServiceAgreement
    urn:pp:System.Account.Client
      urn:pp:System.Account.Client.Contact
      urn:pp:System.Account.Client.PaymentMethod
    urn:pp:System.Account.Template.ServiceAffidavit

    #v2 // these will map to corresponding urn:sec:Security.* entities
    urn:pp:System.Account.Security.Role
    urn:pp:System.Account.Security.UserGroup




Security:

  SecurityResourceTypes:
    urn:sec:Security.Authorization.System

    urn:sec:Security.Authorization.SecureResource // id is corresponding resource urn

    urn:sec:Security.Authorization.Permission.Action
    urn:sec:Security.Authorization.Permission.Role // collection of Action
      - Actions?: Security.Authorization.Permission.Action[] // collection of Actions principal may perform
      - Roles?: Security.Authorization.Permission.Role[]  // collection of Roles assigned to principal
                                                          // (recursive up to 5 layers deep)

    urn:sec:Security.Authentication.Principal.User
        urn:sec:Security.Authentication.Session
    urn:sec:Security.Authentication.Principal.UserGroup // collection of User

    urn:sec:Security.Authorization.Grant
      . Principal: Security.Authentication.Principal.* // single or array
      . Permission: Security.Authorization.Permission.* // single or array
      . Resource: Security.Authorization.SecureResource.* // single or array




  On Authorization Service First Boot:

    - ** Create Authorization System **
    - urn:sec:Security.Authorization.System::ProcessProof

      - ** Create Actions **
      - security:*
        - urn:sec:Security.Authorization.Permission.Action::security:CreateUser
        - urn:sec:Security.Authorization.Permission.Action::security:ReadUser
        - urn:sec:Security.Authorization.Permission.Action::security:UpdateUser
        - urn:sec:Security.Authorization.Permission.Action::security:RemoveUser
        - urn:sec:Security.Authorization.Permission.Action::security:CreateUserGroup
        - urn:sec:Security.Authorization.Permission.Action::security:AddToUserGroup
        - urn:sec:Security.Authorization.Permission.Action::security:RemoveFromUserGroup
        - urn:sec:Security.Authorization.Permission.Action::security:RemoveUserGroup
        - urn:sec:Security.Authorization.Permission.Action::security:CreateAction
        - urn:sec:Security.Authorization.Permission.Action::security:RemoveAction
        - urn:sec:Security.Authorization.Permission.Action::security:CreateRole
        - urn:sec:Security.Authorization.Permission.Action::security:AddToRole
        - urn:sec:Security.Authorization.Permission.Action::security:RemoveFromRole
        - urn:sec:Security.Authorization.Permission.Action::security:RemoveRole
        - urn:sec:Security.Authorization.Permission.Action::security:CreateSecureResource
        - urn:sec:Security.Authorization.Permission.Action::security:RemoveSecureResource
        - urn:sec:Security.Authorization.Permission.Action::security:CreateResourceBelongsToRelation
        - urn:sec:Security.Authorization.Permission.Action::security:ManageResourcePermissions

      - ** Create Roles **
      - urn:sec:Security.Authorization.Permission.Role::SecurityAdministration
        . Actions:
          - security:*

      - ** Create UserGroup **
      - urn:sec:Security.Authorization.Principal.UserGroup::SecurityAccessAdministrators

      - ** Create Authorization Grant **
      - urn:sec:Security.Authorization.Grant::SecurityAccessAdministrators
        . Principal: urn:sec:Security.Authorization.Principal.UserGroup::SecurityAccessAdministrators
        . Permission: urn:sec:Security.Authorization.Permission.Role::SecurityAdministration
        . Resource: [
          urn:sec:Security.Authorization.SecureResource::*
          urn:sec:Security.Authorization.Permission.Action::*
          urn:sec:Security.Authorization.Permission.Role::*
          urn:sec:Security.Authorization.Grant::*
          urn:sec:Security.Authentication.Principal.User::*
          urn:sec:Security.Authentication.Principal.UserGroup::*
          urn:sec:Security.Authentication.Session::*
        ]

      - ** Create Master Security Account **
      - urn:sec:Security.Authorization.Principal.User::{new-security-master-user-uuid}
        . Name: SecurityMaster
        . Email: ${security-master-email}
        . Password: ${security-master-password}
        . Phone: ${security-master-phone}
        ** add this user to SecurityAccessAdministrators UserGroup


  On first boot:

  1. Create System:
  - urn:pp:System::ProcessProof

  2. Create Security Resources for System
    A. Create Actions for all Resource Types (see above)

        Template
          - templates:admin

        Account
          - account:*
          - account:Create
          - account:Admin
          - account:UpdateDetails
          - account:UpdateProfile

          ## v2, custom access controls for account resources
          Security
          - account:CreateRole
          - account:AddToRole # only actions: account:* client:* jobs:* templates:*
          - account:RemoveFromRole
          - account:RemoveRole
          - account:CreateUserGroup
          - account:AddToUserGroup # any user
          - account:RemoveFromUserGroup
          - account:RemoveUserGroup
          - account:ManagePolicy ## only for Resources that are children of this Account, any UserGroup any User

          ** System.Account.Security.* notes:
            - UserGroups and UserRoles will have AccountId membership
            - Will have human readable names, but system ID will be:
              - ${account-uuid}--role-name
              - ${account-uuid}--usergroup-name


          Client
            - client:*
            - client:ListClients
            - client:WriteClient
            - client:ReadClient
            - client:RemoveClient

            Contact
            - client:WriteContact
            - client:RemoveContact

            PaymentMethod
            - client:WritePaymentMethod
            - client:RemovePaymentMethod

          JobCollection
            - jobs:*
            - jobs:AdminJobCollections
            - jobs:ListJobCollections
            - jobs:ListJobs
            - jobs:AddJobToCollection
            - jobs:RemoveJobFromCollection
            - jobs:ListJobsCreatedBySelf
            - jobs:ListJobsAssignedToSelf

              Job
              - jobs:WriteJob
              - jobs:ReadJob
              - jobs:RemoveJob
              - jobs:RemoveJobCreatedBySelf
              - jobs:RequestProcessServer
              - jobs:RequestJobAssignment
              - jobs:Assign
              - jobs:Unassign
              - jobs:AssignToSelf
              - jobs:UnassignToSelf

              ServiceRequest
                - jobs:CreateServiceRequest
                - jobs:AcceptServiceRequest
                - jobs:CreateJobRequest
                - jobs:AcceptJobRequest
                - jobs:ReadServiceAgreementInvolvingSelf

              ServiceAttempt
                - jobs:AddServiceAttempt
                - jobs:RemoveServiceAttempt
                - jobs:RemoveServiceAttemptCreatedBySelf

              Affidavit
                - jobs:GenerateServiceAffidavit
                - jobs:GenerateServiceAffidavitForJobServicedBySelf
                - jobs:RemoveServiceAffidavit
                - jobs:RemoveServiceAffidavitCreatedBySelf

          Templates
            - templates:Admin

        ## end of Account section

    B. Create Roles:
        - urn:sec:Security.Authorization.Permission.Role::SystemAdministration
          . Actions:
            - system:*

        - urn:sec:Security.Authorization.Permission.Role::AccountAdministration
          . Actions:
            - account:*
            - client:*
            - jobs:*
            - templates:*

    C. Create System Owner Account
      - urn:sec:urity.Authorization.Principal.User::{system-owner-user-uuid}
      - urn:sec:urity.Authorization.Grant::{system-owner-policy-uuid}
        . Principal: urn:sec:urity.Principal.User::${system-owner-user-uuid}
        . Resource: urn:pp:System::${new-system-uuid}
        . Permission: urn:sec:urity.Authorization.Permission.Role::SystemAdmin
      ** add this user to SystemAccessAdministrators UserGroup

    D. Initialize System.Templates (data-store + file-hosting) for document-generation-service



  New User Creation:
  ** indentation represents (non-identifying) relationships stored in graph

  // create account
  - urn:pp:System.Account::${new-account-uuid}
    - urn:pp:System.Account.Details::${new-account-details-uuid}
    - urn:pp:System.Account.Profile::${new-account-profile-uuid}
    - urn:pp:System.Account.JobCollection::${new-account-job-collection-uuid}

  // create Account Administrators UserGroup
  - urn:sec:urity.Authorization.Principal.UserGroup::${account-administrators-usergroup-uuid}
    . DisplayName: Account Administrators
    . AccountId: ${new-account-uuid}

  // create User and assign them to Account Administrators UserGroup
    - urn:sec:urity.Authorization.Principal.User::${new-user-uuid}
    ** add this user to AccountAccessAdministrators UserGroup

  // grant to AccountAdministrators UserGroup, AccountAdministrator Role, for newly created account
  - urn:sec:urity.Authorization.Grant
    . Principal: urn:sec:urity.Principal.UserGroup::${account-administrators-usergroup-uuid}
    . Permission: Security.Role::AccountAdministrator
    . Resource: urn:pp:System.Account::${new-account-uuid}






