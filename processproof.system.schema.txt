Principals:
urn:pp:Security.Principal.User
urn:pp:Security.Principal.UserGroup

Actions:
Action
Role - group of actions

Resource
ResourceCollection - group of resources (non-identifying)



ProcessProof URN Format:
urn:{systemNamespace}:{resourceType}::{resourceIdentifier}

resource identifier format:
all IDs are uuids, or semantic indicators like "jobs:read"


Security Notes:
- all security policy will be identity-based, attached to principal
- security policy grants for a resource, will apply to all resource children
- security policy grants can be created by anyone who has
	- security:ManagePolicy for a System.* resource, or
	- account:ManagePolicy for a System.Account.* resource
		- account:ManagePolicy can only include account-level actions/permissions
			- account:*
			- client:*
			- jobs:*
			- templates:*
	- account ownership of a resource, can be found by tracing up the graph to find Account
	- system ownership of a resource, can be found by tracing up the graph to find System
	- System is recursion terminator, in determining the tree of parent resources, for which a user may be granted permission to act upon that resource

Resource Notes:
- collections are n:n by reference, non-identifying, unless otherwise indicated



SecurityResourceTypes:
  urn:pp:Security.Principal
  urn:pp:Security.Principal.User
  urn:pp:Security.Principal.UserGroup // collection of User
  urn:pp:Security.Grant.Action
  urn:pp:Security.Grant.Role // collection of Action
  urn:pp:Security.Policy
    . Principal
    . Grant
    . Resource


SystemResourceTypes:
  urn:pp:System
  urn:pp:System.Template.Affidavit

AccountResourceTypes:
  urn:pp:System.Account
  urn:pp:System.Account.Details
  urn:pp:System.Account.Profile
  urn:pp:System.Account.JobCollection
  urn:pp:System.Account.Job
  urn:pp:System.Account.Job.ServiceAttempt
  urn:pp:System.Account.Job.ServiceAffidavit
  urn:pp:System.Account.Job.JobServiceRequest
  urn:pp:System.Account.Job.JobServiceAgreement
  urn:pp:System.Account.Client
  urn:pp:System.Account.Client.Contact
  urn:pp:System.Account.Client.PaymentMethod
  urn:pp:System.Account.Template.ServiceAffidavit

  #v2
  urn:pp:System.Account.Security.Role
  urn:pp:System.Account.Security.UserGroup



ActionsByResourceType:
	Security:
		- security:*
		- security:CreateUser
		- security:UpdateUser
		- security:RemoveUser
		- security:CreateUserGroup
		- security:AddToUserGroup
		- security:RemoveFromUserGroup
		- security:RemoveUserGroup
		- security:CreateAction
		- security:RemoveAction
		- security:CreateRole
		- security:AddToRole
		- security:RemoveFromRole
		- security:RemoveRole
		- security:ManagePolicy // create permission grants


	System
		- system:*
		- system:Admin
		- system:CreateAccount
		- system:UpdateAccount
		- system:DeactivateAccount
		- system:ActivateAccount
		- system:RemoveAccount

		Template
			- templates:admin

		Account
			- account:*
			- account:Create
			- account:Admin
			- account:UpdateDetails
			- account:UpdateProfile

			## v2, custom access controls for account resources
			Security
			- account:CreateRole
			- account:AddToRole # only actions: account:* client:* jobs:* templates:*
			- account:RemoveFromRole
			- account:RemoveRole
			- account:CreateUserGroup
			- account:AddToUserGroup # any user
			- account:RemoveFromUserGroup
			- account:RemoveUserGroup
			- account:ManagePolicy ## only for Resources that are children of this Account, any UserGroup any User

			** System.Account.Security.* notes:
				- UserGroups and UserRoles will have AccountId membership
				- Will have human readable names, but system ID will be:
					- ${account-uuid}--role-name
					- ${account-uuid}--usergroup-name


			Client
				- client:*
				- client:ListClients
				- client:WriteClient
				- client:ReadClient
				- client:RemoveClient

				Contact
				- client:WriteContact
				- client:RemoveContact

				PaymentMethod
				- client:WritePaymentMethod
				- client:RemovePaymentMethod

			JobCollection
				- jobs:*
				- jobs:AdminJobCollections
				- jobs:ListJobsCollections
				- jobs:ListJobs
				- jobs:AddJobs
				- jobs:RemoveJobs
				- jobs:ListJobsCreatedBySelf
				- jobs:ListJobsAssignedToSelf

					Job
					- jobs:WriteJob
					- jobs:ReadJob
					- jobs:RemoveJob
					- jobs:RemoveJobCreatedBySelf
					- jobs:RequestProcessServer
					- jobs:RequestJobAssignment
					- jobs:Assign
					- jobs:Unassign
					- jobs:AssignToSelf
					- jobs:UnassignToSelf

					ServiceRequest
						- jobs:CreateServiceRequest
						- jobs:AcceptServiceRequest
						- jobs:CreateJobRequest
						- jobs:AcceptJobRequest
						- jobs:ReadServiceAgreementInvolvingSelf

					ServiceAttempt
						- jobs:AddServiceAttempt
						- jobs:RemoveServiceAttempt
						- jobs:RemoveServiceAttemptCreatedBySelf

					Affidavit
						- jobs:GenerateServiceAffidavit
						- jobs:GenerateServiceAffidavitForJobServicedBySelf
						- jobs:RemoveServiceAffidavit
						- jobs:RemoveServiceAffidavitCreatedBySelf

			Templates
				- templates:Admin

		## end of Account section



On first boot:

1. Create system:
- urn:pp:System::{new-system-uuid}

2. Create Security System
	A. Create Actions (see above)

	B. Create Roles:
	- urn:pp:Security.Role::SystemAdmin
		. Name: SystemAdministrator

		- urn:pp:Security.Action::security:*
		- urn:pp:Security.Action::system:*
		- urn:pp:Security.Action::account:*
		- urn:pp:Security.Action::client:*
		- urn:pp:Security.Action::jobs:*

	- urn:pp:Security.Role::AccountAdmin
		. Name AccountAdministrator

		- urn:pp:Security.Action::security:ManagePolicy
		- urn:pp:Security.Action::account:*
		- urn:pp:Security.Action::client:*
		- urn:pp:Security.Action::jobs:*

	C. Create System Owner Account
		- urn:pp:Security.User::{system-owner-user-uuid}
		- urn:pp:Security.Policy::{system-owner-policy-uuid}
			. Principal: urn:pp:Security.Principal.User::${system-owner-user-uuid}
			. Resource: urn:pp:System::${new-system-uuid}
			. Grant: urn:pp:Security.Role::SystemAdmin

	D. Initialize System.Templates (data-store + file-hosting) for document-generation-service



New User Creation:
** indentation represents (non-identifying) relationships stored in graph

// create account
- urn:pp:System.Account::${new-account-uuid}
	- urn:pp:System.Account.Details::${new-account-details-uuid}
	- urn:pp:System.Account.Profile::${new-account-profile-uuid}
	- urn:pp:System.Account.JobCollection::${new-account-job-collection-uuid}

// create Account Administrators UserGroup
- urn:pp:Security.Principal.UserGroup::${account-administrators-usergroup-uuid}
	. DisplayName: Account Administrators
	. AccountId: ${new-account-uuid}

// create User and assign them to Account Administrators UserGroup
	- urn:pp:Security.Principal.User::${new-user-uuid}

// grant to AccountAdministrators UserGroup, AccountAdministrator Role, for newly created account
- urn:pp:Security.Policy
	. Principal: urn:pp:Security.Principal.UserGroup::${account-administrators-usergroup-uuid}
	. Grant: Security.Role::AccountAdministrator
	. Resource: urn:pp:System.Account::${new-account-uuid}






